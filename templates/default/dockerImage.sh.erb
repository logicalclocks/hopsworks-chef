#!/usr/bin/env bash

set -e

help() {
    echo ""
    echo "usage: $0 [create docker_file tag docker_build_opts] | [list image]"
    echo ""
    exit 1
}

PATH="$PATH:/usr/local/bin"
REGISTRY_URL='<%= @registry_addr %>'
VALID_IMAGE_NAME='<%= node['conda']['docker']['image-validation-regex'] %>'
if [ "$1" == "create" ] ; then

    # Sanity checks for injection attacks
    if [ ! -f "$2" ] ; then
	echo "Invalid docker file: $2" >&2
	help
    fi
    if ! [[ $3 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $3" >&2
	help
    fi

    # Remove single quotes from args
    # Use the last argument as building opts
    DOCKER_BUILD_OPTS=$(echo ${@: -1}  | xargs)

    DOCKER_BUILDKIT=1 docker build $DOCKER_BUILD_OPTS -f $2 --tag $3 ./

    docker push $3

    if ! [[ "$4" == "" ]] ; then
        docker tag $3 $4
        docker push $4
    fi

<% if node['install']['managed_docker_registry'] == "false" -%>
elif [ "$1" == "delete" ] ; then
    # Remove tags from docker registry
	  # Based on https://gist.github.com/jaytaylor/86d5efaddda926a25fa68c263830dac1
		curl -g -k -v -sSL -X DELETE "https://$REGISTRY_URL/v2/$2/manifests/$(
			curl -g -k -sSL -I \
			-H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
			"https://$REGISTRY_URL/v2/$2/manifests/$(
				curl -g -k -sSL "https://$REGISTRY_URL/v2/$2/tags/list" | jq -r '.tags[0]'
			)" \
			| awk 'tolower($1) == "docker-content-digest:" { print $2 }' \
			| tr -d $'\r' \
		)"

elif [ "$1" == "gc" ] ; then
    # Run garbage collection for registry
    docker exec registry bin/registry garbage-collect /etc/docker/registry/config.yml -m
	  docker container restart registry

elif [ "$1" == "delete-with-tags" ] ; then
    REPO_NAME=$2
    TAGS_STR=$3
    read -ra TAGS <<< $(echo "$TAGS_STR" | tr ',' ' ')
    for TAG in "${TAGS[@]}"; do
      # get the digest
      DIGEST=$(curl -g -k -sSL -I \
          -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
          "https://$REGISTRY_URL/v2/$REPO_NAME/manifests/$TAG" | awk '$1 == "docker-content-digest:" { print $2 }' | tr -d $'\r')
      # delete the manifest
      curl -g -k -v -sSL -X DELETE "https://${REGISTRY_URL}/v2/$REPO_NAME/manifests/${DIGEST}"
    done
<% else -%>

elif [ "$1" == "delete-acr" ] ; then
  registry=$2
  repository=$3  
  image_prefix=$4
  if [[ -z "$registry" ||  -z "$image_prefix" || -z "$repository" ]] ; then
    echo ""
    echo "usage: delete-acr [registry_name repository_name image_prefix]"
    echo "deletes all images under the specified image_prefix inside the specified registry and repository"
    echo ""
    exit 1
  fi
  tags=`az acr repository show-tags --name $registry --repository $repository --query "[?starts_with(@, '$image_prefix')]" -o tsv --only-show-errors`
  for tag in $tags
  do
      az acr repository untag --name $registry --image $repository:$tag > /dev/null 2>&1
      echo $tag
  done

elif [ "$1" == "loginaz" ] ; then
    if [ "$#" -ne 2 ] ; then
	echo "Illegal number of parameters"
	help
    fi
    az acr login --name $2

elif [ "$1" == "list-tags-acr" ] ; then
  registry=$2
  repository=$3  
  image_prefix=$4
  if [[ -z "$registry" ||  -z "$image_prefix" || -z "$repository" ]] ; then
    echo ""
    echo "usage: list-tag-axr [registry_name repository_name image_prefix]"
    echo "list all image with tags containing the filter string inside the specified regitry"
    echo ""
    exit 1
  fi
  az acr repository show-tags --name $registry --repository $repository --query "[?contains(@, '$image_prefix')]" -o tsv --only-show-errors

elif [ "$1" == "delete-gcr" ] ; then
  registry=$2
  repository=$3
  image_prefix=$4
  if [[ -z "$registry" ||  -z "$image_prefix" || -z "$repository" ]] ; then
    echo ""
    echo "usage: delete-gcr [registry_name repository_name image_prefix]"
    echo "deletes all images under the specified image_prefix inside the specified registry and repository"
    echo ""
    exit 1
  fi

  tags=`gcloud artifacts docker tags list ${registry}/${repository} --format='csv[no-heading](tag)' --filter="tag~${image_prefix}"`
  for tag in ${tags[@]};
  do
    echo "delete ${tag}"
    gcloud artifacts docker tags delete ${registry}/${repository}:${tag} --quiet
  done

elif [ "$1" == "list-tags-gcr" ] ; then
  registry=$2
  repository=$3
  image_prefix=$4
  if [[ -z "$registry" ||  -z "$image_prefix" || -z "$repository" ]] ; then
    echo ""
    echo "usage: list-gcr [registry_name repository_name image_prefix]"
    echo "list all images under the specified image_prefix inside the specified registry and repository"
    echo ""
    exit 1
  fi

  gcloud artifacts docker tags list ${registry}/${repository} --format='csv[no-heading](tag)' --filter="tag~${image_prefix}"
<% end -%>

elif [ "$1" == "list" ] ; then
    if ! [[ $2 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $2" >&2
	help
    fi

    docker pull $2 > /dev/null 2>&1
    docker run --rm $2 conda list -n theenv

elif [ "$1" == "check" ] ; then
    if ! [[ $2 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $2" >&2
	help
    fi

    docker pull $2 > /dev/null 2>&1
    docker run --rm $2 pip check

elif [ "$1" == "export" ] ; then
    if ! [[ $2 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $2" >&2
	help
    fi

    docker pull $2 > /dev/null 2>&1
    docker run --rm $2 conda env export -n theenv
elif [ "$1" == "tag" ] ; then
    if [ "$#" -ne 3 ] ; then
	echo "Illegal number of parameters"
	help
    fi
    if ! [[ $2 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $3" >&2
	help
    fi
    if ! [[ $3 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $3" >&2
	help
    fi
    docker pull $2
    docker tag $2 $3
    docker push $3
else
    help
fi

exit $?
